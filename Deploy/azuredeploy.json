{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "vnet-name": {
            "type": "string",
            "defaultValue": "adsgofast-vnet",
            "metadata": {
                "description": "Name of Azure Bastion resource"
            }
        },
        "bastion-host-name": {
            "type": "string",
            "defaultValue": "azure-bastion-ads-go-fast",
            "metadata": {
                "description": "Name of Azure Bastion resource"
            }
        },
        "bastion-subnet-ip-prefix": {
            "type": "string",
            "defaultValue": "10.1.1.0/27",
            "metadata": {
                "description": "Bastion subnet IP prefix MUST be within vnet IP prefix address space"
            }
        },
        "data-subnet-ip-prefix": {
            "type": "string",
            "defaultValue": "10.1.2.0/27",
            "metadata": {
                "description": "Bastion subnet IP prefix MUST be within vnet IP prefix address space"
            }
        },
        "vnet-address-prefix": {
            "type": "string",
            "defaultValue": "10.1.0.0/16",
            "metadata": {
                "description": "Bastion subnet IP prefix MUST be within vnet IP prefix address space"
            }
        },
        "adf-ir-vm-admin-username": {
            "type": "string",
            "defaultValue": "adsgofastadmin",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adf-ir-vm-admin-password": {
            "type": "secureString",
            "metadata": {
                "description": "Password for the Virtual Machine. The password must be at least 12 characters long and have lower case, upper characters, digit and a special character (Regex match)"
            }
        },
        "adf-ir-vm-size": {
            "type": "string",
            "defaultValue": "Standard_B2ms",
            "metadata": {
                "description": "The size of the VM"
            }
        },
        "keyvault-name": {
            "type": "string",
            "defaultValue": "[concat('ads-kv-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Specifies the name of the key vault."
            }
        },
        "keyvault-enabled-for-deployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
            }
        },
        "keyvault-enabled-for-disk-encryption": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
            }
        },
        "keyvault-enabled-for-template-deployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
            }
        },
        "tenant-id": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
            }
        },
        "keyvault-sku-name": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "sql-server-name": {
            "type": "string",
            "defaultValue": "[concat('adsgofast-srv-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Azure SQL Server Name (Logical Server)."
            }
        },
        "sql-admin-login": {
            "type": "string",
            "defaultValue": "adsgofastadmin",
            "metadata": {
                "description": "The administrator username of the SQL logical server"
            }
        },
        "sql-admin-password": {
            "type": "securestring",
            "metadata": {
                "description": "The administrator password of the SQL logical server."
            }
        },
        "adf-name": {
            "type": "string",
            "defaultValue": "[concat('ADSGoFastADF-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Azure Data Factory Resource Name."
            }
        },
       "azure-function-site-name": {
            "type": "string",
            "defaultValue": "[concat('FuncApp-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "The name of you Web Site."
            }
        },
        "storage-log-account-name": {
            "type": "String",
            "defaultValue": "[concat('logstg', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "The name of the Log Store account to create."
            }            
        },
        "storage-datalake-account-name": {
            "type": "string",
            "defaultValue": "[concat('datalakestg', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "The name of the Data Lake Store account to create."
            }
        },
        "storage-datalake-sku": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_RAGRS"
            ],
            "metadata": {
                "description": "Defines the type of storage account to use for the data lake store"
            }
        },
        "os-disk-type-adfir-vm": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_RAGRS"
            ],
            "metadata": {
                "description": "Defines the type of storage account to use for the data lake store"
            }
        },        
        "app-insights-name": {
            "type": "string",
            "defaultValue": "appinsights-adsgofast",
            "metadata": {
                "description": "The name of Azure Application Insights."
            }
        }
    },
    "variables": {
        "public-ip-address-name-bastion": "[concat(parameters('bastion-host-name'),'-pip')]",
        "data-subnet-name": "Data",
        "bastion-subnet-name": "AzureBastionSubnet",
        "adf-ir-vm-name": "[take(concat('ADFIR-', uniqueString(resourceGroup().id),'-VM'),15)]",
        "network-interface-name": "[concat(variables('adf-ir-vm-name'),'NetInt')]",
        "sample-database-name": "[concat(parameters('sql-server-name'),'/AdventureWorksLT')]",
        "ads-go-fast-database-name": "[concat(parameters('sql-server-name'),'/adsgofast')]",
        "hosting-plan-name": "[concat('hpn-', resourceGroup().name)]",
        "storage-account-id": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage-log-account-name'))]",
        "vnet-data-subnet-resource-id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('data-subnet-name'))]"
    },
    "resources": [
        {
            "apiVersion": "2019-02-01",
            "type": "Microsoft.Network/publicIpAddresses",
            "name": "[variables('public-ip-address-name-bastion')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "apiVersion": "2019-02-01",
            "name": "[parameters('vnet-name')]",
            "type": "Microsoft.Network/virtualNetworks",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnet-address-prefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('bastion-subnet-name')]",
                        "properties": {
                            "addressPrefix": "[parameters('bastion-subnet-ip-prefix')]"
                        }
                    },
                    {
                        "name": "[variables('data-subnet-name')]",
                        "properties": {
                            "addressPrefix": "[parameters('data-subnet-ip-prefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2019-02-01",
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "name": "[concat(parameters('vnet-name'), '/', variables('bastion-subnet-name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('data-subnet-name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "addressPrefix": "[parameters('bastion-subnet-ip-prefix')]"
            }
        },
        {
            "apiVersion": "2019-02-01",
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "name": "[concat(parameters('vnet-name'), '/', variables('data-subnet-name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "addressPrefix": "[parameters('data-subnet-ip-prefix')]",
                "serviceEndpoints": [
                    {
                        "service": "Microsoft.Sql"
                    }
                ]
            }
        },
        {
            "apiVersion": "2019-04-01",
            "type": "Microsoft.Network/bastionHosts",
            "name": "[parameters('bastion-host-name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIpAddresses', variables('public-ip-address-name-bastion'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('bastion-subnet-name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('bastion-subnet-name'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('public-ip-address-name-bastion'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('network-interface-name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]"
            ],
            "tags": {
                "displayName": "[variables('network-interface-name')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipConfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('data-subnet-name'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('adf-ir-vm-name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('network-interface-name'))]"
            ],
            "tags": {
                "displayName": "[variables('adf-ir-vm-name')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('adf-ir-vm-size')]"
                },
                "osProfile": {
                    "computerName": "[variables('adf-ir-vm-name')]",
                    "adminUsername": "[parameters('adf-ir-vm-admin-username')]",
                    "adminPassword": "[parameters('adf-ir-vm-admin-password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2019-Datacenter",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(variables('adf-ir-vm-name'),'OsDisk')]",
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('os-disk-type-adfir-vm')]"
                        },
                        "diskSizeGB": 128
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('network-interface-name'))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyvault-name')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[parameters('keyvault-enabled-for-deployment')]",
                "enabledForDiskEncryption": "[parameters('keyvault-enabled-for-disk-encryption')]",
                "enabledForTemplateDeployment": "[parameters('keyvault-enabled-for-template-deployment')]",
                "tenantId": "[parameters('tenant-id')]",
                "accessPolicies": [
                ],
                "sku": {
                    "name": "[parameters('keyvault-sku-name')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2019-06-01-preview",
            "name": "[parameters('sql-server-name')]",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "[parameters('sql-server-name')]"
            },
            "kind": "v12.0",
            "properties": {
                "administratorLogin": "[parameters('sql-admin-login')]",
                "administratorLoginPassword": "[parameters('sql-admin-password')]",
                "version": "12.0",
                "publicNetworkAccess": "Enabled"
            },
            "resources": [
                {
                    "type": "virtualNetworkRules",
                    "name": "[variables('data-subnet-name')]",
                    "apiVersion": "2015-05-01-preview",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers',parameters('sql-server-name'))]"
                    ],
                    "properties": {
                        "virtualNetworkSubnetId": "[variables('vnet-data-subnet-resource-id')]",
                        "ignoreMissingVnetServiceEndpoint": false
                    }
                }                
            ]
        },
        {
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2019-06-01-preview",
            "name": "[variables('sample-database-name')]",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "[variables('sample-database-name')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sql-server-name'))]"
            ],
            "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 5
            },
            "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "edition": "Basic",
                "maxSizeBytes": 104857600,
                "requestedServiceObjectiveName": "Basic",
                "sampleName": "AdventureWorksLT"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2019-06-01-preview",
            "name": "[variables('ads-go-fast-database-name')]",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "[variables('ads-go-fast-database-name')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sql-server-name'))]"
            ],
            "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 5
            },
            "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "edition": "Basic",
                "maxSizeBytes": 104857600,
                "requestedServiceObjectiveName": "Basic"
            }
        },     
        {
            "apiVersion": "2018-06-01",
            "name": "[parameters('adf-name')]",
            "location": "[parameters('location')]",
            "type": "Microsoft.DataFactory/factories",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {}
        },        
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storage-log-account-name')]",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS"
            }
        },        
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-11-01",
            "name": "[parameters('azure-function-site-name')]",
            "kind": "functionapp",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hosting-plan-name'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage-log-account-name'))]"
            ],
            "properties": {
                "name": "[parameters('azure-function-site-name')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storage-log-account-name'), ';AccountKey=', listKeys(variables('storage-account-id'),'2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components/', parameters('app-insights-name')), '2015-05-01').InstrumentationKey]"
                        }
                    ]
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hosting-plan-name'))]",
                "clientAffinityEnabled": false
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[variables('hosting-plan-name')]",
            "location": "[parameters('location')]",
            "properties": {
                "name": "[variables('hosting-plan-name')]",
                "computeMode": "Dynamic"
            },
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            }
        },
        {
            "apiVersion": "2015-05-01",
            "name": "[parameters('app-insights-name')]",
            "type": "Microsoft.Insights/components",
            "kind": "web",
            "location": "[resourceGroup().location]",
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('hosting-plan-name'))]": "Resource"
            },
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[parameters('app-insights-name')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "location": "[resourceGroup().location]",
            "name": "[parameters('storage-datalake-account-name')]",
            "kind": "StorageV2",
            "sku": {
                "name": "[parameters('storage-datalake-sku')]"
            },
            "properties": {
                "encryption": {
                    "keySource": "Microsoft.Storage",
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    }
                },
                "isHnsEnabled": true,
                "supportsHttpsTrafficOnly": true
            }
        }        
    ]
}
